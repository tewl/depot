{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": ["tsconfig.json"]
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "env": {
        "node": true
    },
    "rules": {
        "@typescript-eslint/comma-dangle": [
            "error",
            "only-multiline"
        ],
        "@typescript-eslint/comma-spacing": "error",
        "@typescript-eslint/consistent-type-definitions": [
            "error",
            "interface"
        ],
        "@typescript-eslint/default-param-last": [
            "error"
        ],
        "@typescript-eslint/dot-notation": [
            "error"
        ],
        "@typescript-eslint/func-call-spacing": [
            "error"
        ],
        "@typescript-eslint/indent": "off", // Docs say this rule is broken. Use eslint one.
        "@typescript-eslint/keyword-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "@typescript-eslint/lines-between-class-members": [
            "error",
            "always",
            {
                "exceptAfterSingleLine": true,
                "exceptAfterOverload": true
            }
        ],
        "@typescript-eslint/member-ordering": [
            "error",
            {
                "default": [
                    // Index signature
                    "signature",
                    // Static
                    "private-static-field",
                    "protected-static-field",
                    "public-static-field",
                    "private-static-method",
                    "protected-static-method",
                    "public-static-method",
                    // Private fields
                    "private-decorated-field",
                    "private-instance-field",
                    "private-abstract-field",
                    "protected-decorated-field",
                    "protected-instance-field",
                    "protected-abstract-field",
                    "public-decorated-field",
                    "public-instance-field",
                    // Constructors
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "public-abstract-field",
                    // Methods
                    "public-decorated-method",
                    "public-instance-method",
                    "public-abstract-method",
                    // Protected helper methods
                    "protected-decorated-method",
                    "protected-instance-method",
                    "protected-abstract-method",
                    // Private helper methods
                    "private-decorated-method",
                    "private-instance-method",
                    "private-abstract-method"
                ]
            }
        ],
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "default",
                "format": [
                    "camelCase"
                ],
                "leadingUnderscore": "allow",
                "trailingUnderscore": "allow"
            },
            {
                "selector": "variable",
                "format": [
                    "camelCase",
                    "UPPER_CASE"
                ],
                "leadingUnderscore": "allow",
                "trailingUnderscore": "allow"
            },
            {
                "selector": "typeLike",
                "format": [
                    "PascalCase"
                ]
            },
            {
                // Angular module variables (ending in "Module") should be PascalCase
                "selector": [
                    "variable"
                ],
                "format": [
                    "PascalCase"
                ],
                "filter": {
                    "regex": "^.*Module$",
                    "match": true
                }
            },
            {
                "selector": "interface",
                "format": [
                    "PascalCase"
                ],
                "prefix": [
                    "I"
                ]
            },
            {
                "selector": "typeParameter",
                "format": [
                    "PascalCase"
                ],
                "prefix": [
                    "T"
                ]
            },
            {
                "selector": "classProperty",
                "format": [
                    "camelCase"
                ],
                "modifiers": [
                    "private"
                ],
                "leadingUnderscore": "require"
            },
            {
                "selector": "enumMember",
                "format": [
                    "camelCase",
                    "UPPER_CASE"
                ]
            }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-inferrable-types": [
            // There's nothing wrong about being explicit.
            "off"
        ],
        "@typescript-eslint/no-loop-func": [
            "error"
        ],
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
            "error"
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                "vars": "all",
                "args": "none", // It's ok to have unused args to b/c they provide signature documentation
                "caughtErrors": "none"
            }
        ],
        "@typescript-eslint/prefer-for-of": [
            "error"
        ],
        "@typescript-eslint/prefer-function-type": [
            "error"
        ],
        "@typescript-eslint/prefer-includes": [
            "error"
        ],
        "@typescript-eslint/prefer-literal-enum-member": [
            "error",
            {
                "allowBitwiseExpressions": true
            }
        ],
        "@typescript-eslint/prefer-optional-chain": [
            "error"
        ],
        "@typescript-eslint/prefer-readonly": [
            "error"
        ],
        "@typescript-eslint/prefer-reduce-type-parameter": [
            "error"
        ],
        "@typescript-eslint/prefer-return-this-type": [
            "error"
        ],
        "@typescript-eslint/prefer-string-starts-ends-with": [
            "error"
        ],
        "@typescript-eslint/prefer-ts-expect-error": [
            "error"
        ],
        "@typescript-eslint/quotes": [
            "error",
            "double",
            {
                "avoidEscape": true,
                "allowTemplateLiterals": true
            }
        ],
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/semi": [
            "error",
            "always"
        ],
        "@typescript-eslint/space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "@typescript-eslint/type-annotation-spacing": [
            "error"
        ],
        "accessor-pairs": "error",
        "array-bracket-newline": [
            "error",
            "consistent"
        ],
        "array-bracket-spacing": [
            "error",
            "never"
        ],
        "array-callback-return": "error",
        // Sometimes adding curly braces to an arrow function can help, especially when the returned expression is complicated.
        "arrow-body-style": "off",
        "arrow-parens": [
            "error",
            "always"
        ],
        "arrow-spacing": [
            "error",
            {
                "before": true,
                "after": true
            }
        ],
        "block-scoped-var": "error",
        "block-spacing": "error",
        "camelcase": "error",
        "comma-dangle": "off", // Must be off when @typescript-eslint/comma-dangle is on
        "comma-spacing": "off", // Must be off when @typescript-eslint/comma-spacing is on
        "comma-style": [
            "error",
            "last"
        ],
        "computed-property-spacing": [
            "error",
            "never"
        ],
        "consistent-this": [
            "error",
            "self"
        ],
        "curly": "error",
        "default-case-last": "error",
        "default-param-last": "off", // Must be off when @typescript-eslint/default-param-last is on
        "dot-location": [
            "error",
            "property"
        ],
        "dot-notation": "off", // Must be off when @typescript-eslint/dot-notation is on
        "eol-last": "error",
        "eqeqeq": [
            "error",
            "always"
        ],
        "func-call-spacing": "off", // Must be off when @typescript-eslint/func-call-spacing is on
        "func-name-matching": [
            "error",
            "always",
            {
                "considerPropertyDescriptor": true,
                "includeCommonJSModuleExports": true
            }
        ],
        "func-names": "off", // Nameless functions are used frequently in many frameworks such as Express
        "function-paren-newline": [
            "error",
            "consistent"
        ],
        "grouped-accessor-pairs": [
            "error",
            "getBeforeSet"
        ],
        "guard-for-in": "error",
        "implicit-arrow-linebreak": [
            "error",
            "beside"
        ],
        "indent": [
            "error",
            4,
            {
                "ignoredNodes": [
                    "ConditionalExpression"
                ],
                "MemberExpression": 0, // Chaining methods does not require indentation
                "SwitchCase": 1,
                "flatTernaryExpressions": true,
                "ignoreComments": true,
                "FunctionDeclaration": {
                    "parameters": "first"
                },
                "FunctionExpression": {
                    "parameters": "first"
                },
                "CallExpression": {
                    "arguments": "first"
                },
                "ArrayExpression": "first",
                "ObjectExpression": "first",
                "ImportDeclaration": "first"
            }
        ],
        "key-spacing": [
            "error",
            {
                "align": {
                    "beforeColon": false,
                    "afterColon": true,
                    "on": "value",
                    "mode": "strict"
                }
            }
        ],
        "keyword-spacing": "off", // Must be off when @typescript-eslint/keyword-spacing is on
        "linebreak-style": "off",
        "lines-between-class-members": "off", // Must be off when @typescript-eslint/lines-between-class-members is on
        "max-len": [
            "error",
            {
                "code": 120,
                "tabWidth": 4,
                "comments": 160,
                "ignoreComments": true,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreRegExpLiterals": true
            }
        ],
        "new-parens": "error",
        "no-constructor-return": "error",
        "no-duplicate-imports": "error",
        "no-eq-null": "error",
        "no-eval": [
            "error",
            {
                "allowIndirect": true
            }
        ],
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-implicit-coercion": [
            "error",
            {
                "boolean": false,
                "number": true,
                "string": true
            }
        ],
        "no-implied-eval": "error",
        "no-lone-blocks": "error",
        "no-loop-func": "off", // Must be off when @typescript-eslint/no-loop-func is on
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-promise-executor-return": "error",
        "no-return-await": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-template-curly-in-string": "error",
        "no-trailing-spaces": "error",
        "no-underscore-dangle": [
            "off"
        ],
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": "error",
        "no-unreachable-loop": "error",
        "no-unsafe-optional-chaining": [
            "error",
            {
                "disallowArithmeticOperators": true
            }
        ],
        "no-unused-expressions": "off", // Must be off when @typescript-eslint/no-unused-expressions is on
        "no-unused-vars": "off", // Must be off when @typescript-eslint/no-unused-vars is on
        "no-useless-backreference": "error",
        "no-useless-call": "error",
        "no-useless-computed-key": [
            "error",
            {
                "enforceForClassMembers": true
            }
        ],
        "no-useless-rename": "error",
        "no-var": "error",
        "no-void": "error",
        "no-whitespace-before-property": "error",
        "object-curly-newline": [
            "error",
            {
                "consistent": true
            }
        ],
        "object-property-newline": [
            "error",
            {
                "allowAllPropertiesOnSameLine": true
            }
        ],
        "one-var": [
            "error",
            {
                "var": "never",
                "let": "never",
                "const": "never",
                "separateRequires": true
            }
        ],
        "one-var-declaration-per-line": [
            "error",
            "always"
        ],
        // Sometimes regular named functions are preferrable because their name shows up in call stacks.
        "prefer-arrow/prefer-arrow-functions": "off",
        "prefer-const": [
            "error",
            {
                "destructuring": "all"
            }
        ],
        "prefer-named-capture-group": "error",
        "prefer-object-spread": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "quotes": "off", // Needs to be off when @typescript-eslint/quotes is on
        "radix": [
            "error",
            "always"
        ],
        "require-atomic-updates": "error",
        "require-await": "off", // Must be off when @typescript-eslint/require-await is on
        "rest-spread-spacing": "error",
        "semi": "off", // Must be off when @typescript-eslint/semi is on
        "semi-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "semi-style": [
            "error",
            "last"
        ],
        "space-before-blocks": [
            "error",
            "always"
        ],
        "space-before-function-paren": "off", // Must be off when @typescript-eslint/space-before-function-paren is on
        "space-unary-ops": [
            "error",
            {
                "words": true,
                "nonwords": false
            }
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                "exceptions": [
                    "-",
                    "+",
                    "=",
                    "/",
                    "*"
                ],
                "markers": [
                    "/"
                ]
            }
        ],
        "switch-colon-spacing": "error",
        "wrap-iife": [
            "error",
            "any"
        ]
    },
    "overrides": [
        {
            "files": [
                "*.spec.ts"
            ],
            "rules": {
                "@typescript-eslint/no-empty-function": "off",
                "@typescript-eslint/no-unused-vars": "off"
            }
        }
    ]
}
