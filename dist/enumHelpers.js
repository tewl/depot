"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
/**
 * Gets a random key from a number based enumeration
 * @param enumObject - The enumeration to choose a key from
 * @return A key from the specified enumeration
 */
function numericEnumRandomKey(enumObject) {
    var allKeys = Object.keys(enumObject);
    // Numeric enumerations contain "reverse mappings" where the key is the
    // string version of the number and the value is the string version of the
    // key.  Get rid of those.
    var normalKeys = allKeys.filter(function (curKey) {
        return typeof (enumObject[curKey]) === "number";
    });
    return normalKeys[_.random(normalKeys.length - 1)];
}
exports.numericEnumRandomKey = numericEnumRandomKey;
/**
 * Gets a random value from a number based enumeration
 * @param enumObject - The enumeration to choose a value from
 * @return A value from the specified enumeration
 */
function numericEnumRandomValue(enumObject) {
    return enumObject[numericEnumRandomKey(enumObject)];
}
exports.numericEnumRandomValue = numericEnumRandomValue;
/**
 * Gets a random key from a string based enumeration
 * @param enumObject - The enumeration to choose a key from
 * @return A key from the specified enumeration
 */
function stringEnumRandomKey(enumObject) {
    var allKeys = Object.keys(enumObject);
    return allKeys[_.random(allKeys.length - 1)];
}
exports.stringEnumRandomKey = stringEnumRandomKey;
/**
 * Gets a random value from a string based enumeration
 * @param enumObject - The enumeration to choose a value from
 * @return A value from the specified enumeration
 */
function stringEnumRandomValue(enumObject) {
    return enumObject[stringEnumRandomKey(enumObject)];
}
exports.stringEnumRandomValue = stringEnumRandomValue;
/**
 * Converts an enumeration value to its key (as a string) in a type safe manner
 * @param enumObject - The enumeration
 * @param val - The value to convert
 * @return The key of the enumeration that has the specified value
 */
function numericEnumValToString(enumObject, val) {
    // Leverage the fact that the TS compiler puts the reverse mappings in
    // the generated enumeration object too.  These reverse mappings have a key
    // that is the value and a value that is the string symbol name.
    return enumObject[val];
}
exports.numericEnumValToString = numericEnumValToString;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbnVtSGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBCQUE0QjtBQUc1Qjs7OztHQUlHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUksVUFBYTtJQUNqRCxJQUFNLE9BQU8sR0FBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQW1CLENBQUM7SUFFMUUsdUVBQXVFO0lBQ3ZFLDBFQUEwRTtJQUMxRSwwQkFBMEI7SUFDMUIsSUFBTSxVQUFVLEdBQW1CLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxNQUFNO1FBQ3JELE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFWRCxvREFVQztBQUdEOzs7O0dBSUc7QUFDSCxTQUFnQixzQkFBc0IsQ0FBSSxVQUFhO0lBQ25ELE9BQU8sVUFBVSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUZELHdEQUVDO0FBSUQ7Ozs7R0FJRztBQUNILFNBQWdCLG1CQUFtQixDQUFJLFVBQWE7SUFDaEQsSUFBTSxPQUFPLEdBQW1CLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFtQixDQUFDO0lBQzFFLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFIRCxrREFHQztBQUdEOzs7O0dBSUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBSSxVQUFhO0lBQ2xELE9BQU8sVUFBVSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUZELHNEQUVDO0FBR0Q7Ozs7O0dBS0c7QUFDSCxTQUFnQixzQkFBc0IsQ0FBSSxVQUFhLEVBQUUsR0FBZTtJQUNwRSxzRUFBc0U7SUFDdEUsMkVBQTJFO0lBQzNFLGdFQUFnRTtJQUNoRSxPQUFRLFVBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUxELHdEQUtDIiwiZmlsZSI6ImVudW1IZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5cblxuLyoqXG4gKiBHZXRzIGEgcmFuZG9tIGtleSBmcm9tIGEgbnVtYmVyIGJhc2VkIGVudW1lcmF0aW9uXG4gKiBAcGFyYW0gZW51bU9iamVjdCAtIFRoZSBlbnVtZXJhdGlvbiB0byBjaG9vc2UgYSBrZXkgZnJvbVxuICogQHJldHVybiBBIGtleSBmcm9tIHRoZSBzcGVjaWZpZWQgZW51bWVyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG51bWVyaWNFbnVtUmFuZG9tS2V5PFQ+KGVudW1PYmplY3Q6IFQpOiBrZXlvZiBUIHtcbiAgICBjb25zdCBhbGxLZXlzOiBBcnJheTxrZXlvZiBUPiA9IE9iamVjdC5rZXlzKGVudW1PYmplY3QpIGFzIEFycmF5PGtleW9mIFQ+O1xuXG4gICAgLy8gTnVtZXJpYyBlbnVtZXJhdGlvbnMgY29udGFpbiBcInJldmVyc2UgbWFwcGluZ3NcIiB3aGVyZSB0aGUga2V5IGlzIHRoZVxuICAgIC8vIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBudW1iZXIgYW5kIHRoZSB2YWx1ZSBpcyB0aGUgc3RyaW5nIHZlcnNpb24gb2YgdGhlXG4gICAgLy8ga2V5LiAgR2V0IHJpZCBvZiB0aG9zZS5cbiAgICBjb25zdCBub3JtYWxLZXlzOiBBcnJheTxrZXlvZiBUPiA9IGFsbEtleXMuZmlsdGVyKChjdXJLZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiAoZW51bU9iamVjdFtjdXJLZXldKSA9PT0gXCJudW1iZXJcIjtcbiAgICB9KTtcbiAgICByZXR1cm4gbm9ybWFsS2V5c1tfLnJhbmRvbShub3JtYWxLZXlzLmxlbmd0aCAtIDEpXTtcbn1cblxuXG4vKipcbiAqIEdldHMgYSByYW5kb20gdmFsdWUgZnJvbSBhIG51bWJlciBiYXNlZCBlbnVtZXJhdGlvblxuICogQHBhcmFtIGVudW1PYmplY3QgLSBUaGUgZW51bWVyYXRpb24gdG8gY2hvb3NlIGEgdmFsdWUgZnJvbVxuICogQHJldHVybiBBIHZhbHVlIGZyb20gdGhlIHNwZWNpZmllZCBlbnVtZXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gbnVtZXJpY0VudW1SYW5kb21WYWx1ZTxUPihlbnVtT2JqZWN0OiBUKTogVFtrZXlvZiBUXSB7XG4gICAgcmV0dXJuIGVudW1PYmplY3RbbnVtZXJpY0VudW1SYW5kb21LZXkoZW51bU9iamVjdCldO1xufVxuXG5cblxuLyoqXG4gKiBHZXRzIGEgcmFuZG9tIGtleSBmcm9tIGEgc3RyaW5nIGJhc2VkIGVudW1lcmF0aW9uXG4gKiBAcGFyYW0gZW51bU9iamVjdCAtIFRoZSBlbnVtZXJhdGlvbiB0byBjaG9vc2UgYSBrZXkgZnJvbVxuICogQHJldHVybiBBIGtleSBmcm9tIHRoZSBzcGVjaWZpZWQgZW51bWVyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0VudW1SYW5kb21LZXk8VD4oZW51bU9iamVjdDogVCk6IGtleW9mIFQge1xuICAgIGNvbnN0IGFsbEtleXM6IEFycmF5PGtleW9mIFQ+ID0gT2JqZWN0LmtleXMoZW51bU9iamVjdCkgYXMgQXJyYXk8a2V5b2YgVD47XG4gICAgcmV0dXJuIGFsbEtleXNbXy5yYW5kb20oYWxsS2V5cy5sZW5ndGggLSAxKV07XG59XG5cblxuLyoqXG4gKiBHZXRzIGEgcmFuZG9tIHZhbHVlIGZyb20gYSBzdHJpbmcgYmFzZWQgZW51bWVyYXRpb25cbiAqIEBwYXJhbSBlbnVtT2JqZWN0IC0gVGhlIGVudW1lcmF0aW9uIHRvIGNob29zZSBhIHZhbHVlIGZyb21cbiAqIEByZXR1cm4gQSB2YWx1ZSBmcm9tIHRoZSBzcGVjaWZpZWQgZW51bWVyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ0VudW1SYW5kb21WYWx1ZTxUPihlbnVtT2JqZWN0OiBUKTogVFtrZXlvZiBUXSB7XG4gICAgcmV0dXJuIGVudW1PYmplY3Rbc3RyaW5nRW51bVJhbmRvbUtleShlbnVtT2JqZWN0KV07XG59XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBlbnVtZXJhdGlvbiB2YWx1ZSB0byBpdHMga2V5IChhcyBhIHN0cmluZykgaW4gYSB0eXBlIHNhZmUgbWFubmVyXG4gKiBAcGFyYW0gZW51bU9iamVjdCAtIFRoZSBlbnVtZXJhdGlvblxuICogQHBhcmFtIHZhbCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFRoZSBrZXkgb2YgdGhlIGVudW1lcmF0aW9uIHRoYXQgaGFzIHRoZSBzcGVjaWZpZWQgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG51bWVyaWNFbnVtVmFsVG9TdHJpbmc8VD4oZW51bU9iamVjdDogVCwgdmFsOiBUW2tleW9mIFRdKTogc3RyaW5nIHtcbiAgICAvLyBMZXZlcmFnZSB0aGUgZmFjdCB0aGF0IHRoZSBUUyBjb21waWxlciBwdXRzIHRoZSByZXZlcnNlIG1hcHBpbmdzIGluXG4gICAgLy8gdGhlIGdlbmVyYXRlZCBlbnVtZXJhdGlvbiBvYmplY3QgdG9vLiAgVGhlc2UgcmV2ZXJzZSBtYXBwaW5ncyBoYXZlIGEga2V5XG4gICAgLy8gdGhhdCBpcyB0aGUgdmFsdWUgYW5kIGEgdmFsdWUgdGhhdCBpcyB0aGUgc3RyaW5nIHN5bWJvbCBuYW1lLlxuICAgIHJldHVybiAoZW51bU9iamVjdCBhcyBhbnkpW3ZhbF07XG59XG4iXX0=
